package app;

option java_package="com.messenger.javaserver.imchatserver.proto";

//option optimize_for = LITE_RUNTIME;
//option cc_generic_services = false;
//option java_generic_services = false;
import "app/imchatmsg.proto";
import "app/mobrequestbase.proto";

//发送P2P消息流程
//A发送给B,msgtype=EChatSubItemType_Text; 服务器收到后存储到message 表
//服务器然后通知给B(P2PNtf),B收到P2PNtf后保存DB后发送EChatSubItemType_RECEIVED给服务器
//服务器收到ACKRECEIVED后标记该记录为Received，然后通知A（ACKRECEIVED）
//A收到ACKRECEIVED后发送ACKRECEIVEDDel给服务器通知服务器删除DB里的消息


//method: SendP2P
//client send P2PMsg to other user
message SendP2PMessageRequest
{
	optional app.MobRequestBase baseinfo = 1;
    required uint64 uid=2;//发送方uid
    optional string fromnickname=3;//发送方昵称，不用填
    required uint64 touid=4;//接收方uid
    required int32 	type=5;//see EChatSubItemType
    optional uint64  msgid=6; //毫秒,使用服务器计算生成的时间，当做msgid使用，发送方唯一，用于消息去重功能
    optional bytes   data=7; //根据type对应的数据格式序列化后的数据
    optional bool  offsaveflag=8; //不用
    optional uint32 validtime=9; //不用 snapchat validate time when opened or played
    optional int32  retrycount=10;//客户端重试次数,服务器统计用
    optional uint64 msgsrvtime=11;//relay 消息时用，服务器内部重发时去重
    optional uint64 eccversion=13;//接收方的公钥版本号
    optional bytes publickey=14;//ECC公钥
    optional string aesivkey=15;//AES IV KEY;
    optional int32 fromtype=16;//0==default;1==客服消息;2==公众帐号推送
    optional bytes topublickey=17;//接收方ECC公钥
}
message SendP2PMessageResponse
{
    required int32 ret=1;//==0返回成功，see ECocoErrorcode, 1==数据库异常; 失败需要客户端延迟5秒后重试
    optional uint64 srvtime=2;//unit is millisecond,server time
    optional bool  touidonline=100;//对方是否在线,true为在线
    optional uint64 eccversion=3;//接收方的公钥版本号
    optional bytes publickey=4;//接收方的公钥
}

//method: markP2PRead
message MarkP2PReadRequest
{
    required uint64 uid = 2; // 消息的接收方
		required uint64 peer_uid = 3; // 消息的发送方
    required uint64 maxsrvtime = 4; // ack receiveds 成功后的最大消息时间戳
}
message MarkP2PReadResponse
{
		required int32 ret = 1;
}

//服务器通知客户端IM消息
//method: P2PNtf
message P2PMessageNotify
{
    optional uint64 fromuid=2;//发送方uid,主要是离线返回时可以为空
    optional string fromnickname=3;//发送方昵称，主要是离线返回时可以为空
    optional uint64  msgsrvtime=4; //unit is millisecond,服务器收到时间
    optional uint64  msgid=5; //unit is millisecond,相当于msgid,客户端生成的消息时间，用于去重
    optional uint64 touid=6;//接收方uid
    optional uint32 validtime=7;// 不用snapchat validate time when opened or played,unit is second
    required  int32 type=10;//see EChatSubItemType
    optional bytes   data=11; //generated by EChatSubItemType,maybe empty
    optional bool   offsaveflag=12;//不用，
    optional bool   autoreplyflag=13;//不用
    optional string fromavatar=14;//发送者的头像URL
    optional bool    friends=15;//fromuid是否是touid的好友
	optional uint64 pushid=17;//apn push id
	optional uint64 pushserver=18;//cocopush服务器id
	optional uint64 rsaversion=19;//接收方的公钥版本号,RSA加密算法，新版本不用了
	optional bytes crypaeskey=20;//新版本不用了，crypaeskey 使用 rsaversion 对应的 publickey 对 aeskey 加密得到, aeskey 用于对明文数据进行 aes 加密
	optional int32 origdatalen=21;//原始数据的长度
	optional uint64 eccversion=22;//接收方的公钥版本号,ECC 加密算法
	optional bytes publickey=23;//ECC公钥
	optional string aesivkey=24;//AES IV KEY;
    optional bool pushmute=25;//apn push, mute, increase badge only
    optional int32 fromtype=26;//0==default;1==客服消息;2==公众帐号推送
    optional bool isVip = 27;//是否vip用户
}

//服务器批量发送消息通知客户端，一般是在离线消息里通知回来
//method:P2POffBatchNtf, P2POffAckBatchNtf
message P2PMessageBatchNotify
{
	repeated P2PMessageNotify msgs=1;
	optional uint64 touid=2;
	optional bool  islastbatch=3;//是否是最后一批通知消息
}

// 对应 sessiontype == ESessionType_SYSTEM_EXTEND_MSG
message SystemMsgExtendNtf {
    required int32 type = 1; // see ESysSubItemType
    optional bytes data = 2; // 对应 ESysSubItemType 的消息体序列化后的数据
}

//离线消息设计原理：
//客户端发送获取离线消息命令，服务器以20条为单位推送给客户端（20条压缩后<=2KB),这样避免离线消息过多时客户端网络差时获取不到消息
//主要是解决离线消息很多时在网络比较慢时堵住客户端的问题以及一个大包导致客户端收不下来问题
//method: GetP2POff
//message GetP2POffMessageListRequest
//{
//	optional app.MobRequestBase baseinfo = 1;
//	required uint64 fromuid=2;//
//	optional uint64 msgtime=3;//上次同步后的最后一条离线消息时间戳
//}
//message P2PMessageSession
//{
//	required uint64 fromuid=1;//发送方uid
//    required string fromnickname=2;//发送方昵称
//    required int32  totaloffnum=3;//该发送方总得消息数，现在不用管它了
//    repeated P2PMessageNotify msglist=4;//返回的消息列表
//    optional string fromavatar=5;//发送者头像URL
//}
//message GetP2POffMessageListResponse
//{
//	required int32 ret=1;//0==成功
//	repeated P2PMessageSession sessionlist=2;//消息session列表
//    optional bool hasoff=3;//是否有离线应答消息,若false的话不用同步应答消息了
//    optional bool hasmoreoffmsg=4;//是否有更多离线消息在push
//}
//该函数作废
//method: GetMoreP2POff
//message GetMoreP2POffMessageListRequest
//{
//	optional app.MobRequestBase baseinfo = 1;
//	required uint64 fromuid=2;//
//	required uint64 touid=3;
//	optional uint64 lastmsgtime=4;//上次返回的最后一条消息的时间,unit is millisecond,
//	//一次性返回所有数据
//}
////该函数作废
//message GetMoreP2POffMessageListResponse
//{
//	required int32 ret=1;
//	repeated  P2PMessageNotify msglist=2;
//	optional bool  moremsg=4;//是否还有更多消息
//}

//批量AckReceived的消息，修改数据库标记为Received,并批量通知对方
//GetP2POffMessageListRequest 返回后客户端收到后 AckReceived这些fromuid的离线（即使本地已经存在也需要Ack）
//method: AckReceiveds
message AckReceivedsP2POffMessageRequest
{
	optional app.MobRequestBase baseinfo = 1;
	required uint64 uid=2;
	repeated uint64 partuids=3;//对方的uid
	repeated uint64 msgid=4;//对方发送的msgid
	repeated uint64 msgsrvtime=5;//消息服务器接收到的时间
	repeated bool  msgreaded=6;//消息已读标志
	repeated bool   needsave=7;//是否需要保存数据库
}
message AckReceivedsP2POffMessageResponse
{
	required int32 ret=1;
}


//删除某条应答消息,A->B->A后通知服务器删除应答消息，即2个勾后调用
//method: AckReceivedDel
message AckReceivedDelMessageRequest
{
	optional app.MobRequestBase baseinfo = 1;
    required uint64 uid=2;//发送方uid
    required uint64 partuid=3;//接收方uid
    required uint64 msgid=4;//发送方发得消息的msgid
    optional uint64 msgsrvtime=5;//消息服务器接收到的时间
}
message AckReceivedDelMessageResponse
{
   required int32 ret=1;//0==成功，失败需要客户端延迟5秒后重试
}

//获取对方收到消息的应答记录列表
//method: GetP2POffReceived
//message GetP2POffMarkReceivedMessageListRequest
//{
//	optional app.MobRequestBase baseinfo = 1;
//	required uint64 uid=2;
//}
//message GetP2POffMarkReceivedMessageListResponse
//{
//	required int32 ret=1;
//	repeated  P2PMessageNotify msglist=2;
//	optional uint64 maxsrvmsgtime=3;
//}
//批量删除应答离线消息,客户端收到P2POffAckBatchNtf，保存数据库后通知服务器删除应答记录
//method: AckBatchReceivedDel
message AckReceivedDelOffMessageListRequest
{
	optional app.MobRequestBase baseinfo = 1;
    required uint64 uid=2;
	repeated uint64 touid=3;
	repeated uint64 msgid=4;
	repeated uint64 msgsrvtime=5;

}
message AckReceivedDelOffMessageListResponse
{
	required int32 ret=1;
}

//发起方调用该接口之后收到响应后 将响应中的receiver字段 作为消息发送给接收方
//method: getVoipChatRoom
message GetVoipChatRoomRequest
{
  optional app.MobRequestBase baseinfo = 1;
  required uint64 uid=2;    //发送方uid
  required uint64 to_uid=3; //接收方uid
  required int32 rtc_type=4;  //0==voice;1==vedio
  optional bool   broadbandnet=5;//是否是宽带网络
  optional int32  resolutiontype=7;//0==low,1==middle,2==high(640)
  optional string machinemodel=8; //机器型号，如iphone4,iphone4s
  optional int32  cpucorenum=9;//发送方的CPU核数,这个需要上传
  optional string imsi=10;//发送方的 IMSI
  optional uint64  msgid=13;
}

message GetVoipChatRoomResponse
{
  required int32 ret=1;
  repeated IceServerPB ice_server=2;
  optional int32 room_id=3; //turnserver服务器房间号 用于兼容老版本
  optional string voice_mail_id=4; //发送voicemail的唯一id
  optional uint64 created=5; //发送方创建session的时间
  optional bool caller=6; //区分主叫方被叫方 true主叫方 false被叫方
  optional int32 resolutiontype=7;//0==low,1==middle,2==high(640)
  optional string partmachinemodel=8; //机器型号，如iphone4,iphone4s
  optional VideoCallParameter videoparameter=9;//视频相关参数
  optional int32  voicecodetype=10;//ERTCVoiceCodecType
  optional uint64 srvtime=11;//服务器时间
  optional VideoCallParameter tovideoparameter=12;
  repeated IceServerPB toice_server=13;
  optional string  toversion=14;
  optional int32 tovoicecodetype=15;
  repeated string relayservercandidate=16;//预先设置好的中继服务器的candidate
  optional string aeskey=17;//udp 交换信令aes密码
  optional uint64 relayrandkey=18;//udp 中继随机应子
  optional bool   useoffer=19;//是否使用服务器提供的offer
  optional string rtcoffer=20;// 服务器提供的offer
  optional string rtcanswer=21;// 服务器提供的answer
  optional app.IMChatRTCItemPB receiver=22;
  optional bool disablep2p=23; // 控制是否禁用p2p
  optional WebRtcAudioParameter audioparameter=24; //WebRtcAudioParameter 根据机型适配
  optional string icePwd=25;
  optional string inline=26;
  optional string audiorelaysrv=27;//udp 中继服务器ip:port
  optional string videorelaysrv=28;//udp 中继服务器ip:port
  optional bool enableFec=29;//是否启用offer中的视频前向纠错参数
  optional bool enableNack=30;//是否启用丢包反馈机制
  optional bool enableRtpCrypt=31;//是否把RTP包进行加密,使用aeskey进行AES256进行加密
  optional int32 rtcversion=32;//当前版本是0 新加密版本是1 往后依次类推
  optional bool generalVoipEncrypt=33;//coturn 支持加密
  optional string realm=34;//获取realm减少一次与coturn的交互
  optional int32 speedyPriority=35;//speedy优先级
  optional bool udpEncrypt2=36;//新加密方式
  optional int32 relaytype=37;//disable p2p为true; 0:only speedy relay; 1:only coturn relay; 2:speedy and coturn relay
}



//根据voipcalltype来决定返回的response是GetAgoraVoipChatRoomResponse还是GetVoipChatRoomResponse
//method: getVoipCall
message GetVoipCallRequest
{
  optional app.MobRequestBase baseinfo = 1;
  required uint64 uid=2;            //发送方uid
  required uint64 to_uid=3;         //接收方uid
  required int32 rtc_type=4;        //0==voice;1==vedio
  optional bool broadbandnet=5;     //是否是宽带网络
  optional int32 resolutiontype=7;  //0==low,1==middle,2==high(640)
  optional string machinemodel=8;   //机器型号，如iphone4,iphone4s
  optional int32 cpucorenum=9;      //发送方的CPU核数,这个需要上传
  optional string imsi=10;          //发送方的 IMSI
  optional uint64 msgid=13;
}

message GetVoipCallResponse
{
  required int32 voipcalltype=1; // 0==webrtc; 1==agora
  optional GetAgoraVoipChatRoomResponse agoraRsp=2;
  optional GetVoipChatRoomResponse webrtcRsp=3;
}

// method: reportVoipStatus
message ReportVoipStatusRequest
{
    optional app.MobRequestBase baseinfo = 1;
    required uint64 uid = 2; // 自己
    required uint64 part_uid = 3; // 对方
    required int32 room_id = 4; // room id
    required uint64 created = 5; // created
    required bool caller = 6; // 自己是拨打方==true 自己是接收方==false
    optional double video_loss_rate = 7; // 视频丢包率
    optional double audio_loss_rate = 8; // 语音丢包率
    optional int32 video_rtt = 9; // 视频 rtt ms
    optional int32 audio_rtt = 10; // 语音 rtt ms
    optional int32 video_jitter = 11; // 视频抖动 ms
    optional int32 audio_jitter = 12; // 音频抖动 ms
    optional double video_bitrate = 13; // 视频 bitrate
    optional double audio_bitrate = 14; // 音频 bitrate
    optional int32 conn_time = 15; // 连接花费时间 ms 底层上报
    optional string route_begin = 16; // 第一条选路 底层上报
    optional string route_path = 17; // 选路切换路径 底层上报
    optional string route_max = 18; // 通话时间最长的路径
}
message ReportVoipStatusResponse
{
    required int32 ret = 1;
}

//发起方调用该接口之后收到响应后 将响应中的receiver字段 作为消息发送给接收方
//如果同时拨打 根据收到的uid大小来作出决策 确定使用uid小的一方的room_id来进行通话
message GetAgoraVoipChatRoomResponse
{
  required int32 ret=1;
  required string room_id=2;
  optional uint64 created=3;    //发送方创建session的时间
  optional bool caller=4;       //true主叫方 false被叫方
  optional uint64 srvtime=5;    //服务器时间
  optional app.IMAgoraChatRTCItemPB receiver=6;
  optional string vendorkey=7;  //调用 agora api 所使用的key
  optional string aeskey=8;     //aes 128 key 用于音视频加密
  optional string signkey=9;    //agora 动态签名key
  optional int32 videoprofile=10; // videoprofile
  optional string channelkey=11; // channel key
  optional string recordkey=12; // record key
}

//Voip新版本语音视频聊天时获取房间请求
//method: getRTCChatRoom
message GetRTCChatRoomRequest
{
	optional app.MobRequestBase baseinfo = 1;
	required uint64 uid=2;		//发送方uid
	required uint64 to_uid=3;	//接收方uid
	required int32 rtc_type=4;	//0==voice;1==vedio
	optional bool   broadbandnet=5;//是否是宽带网络
	optional int32  resolutiontype=7;//0==low,1==middle,2==high(640)
	optional string machinemodel=8;	//机器型号，如iphone4,iphone4s
	optional int32  cpucorenum=9;//发送方的CPU核数,这个需要上传
	optional string imsi=10;//发送方的 IMSI
	optional uint64  msgid=13;
}

message GetRTCChatRoomResponse
{
	required int32 ret=1;
	repeated IceServerPB ice_server=2;
	optional int32 room_id=3;		//turnserver服务器房间号 用于兼容老版本
    optional string voice_mail_id=4;//发送voicemail的唯一id
    optional uint64 created=5;		//发送方创建session的时间
    optional bool caller=6;//区分主叫方被叫方 true主叫方 false被叫方
	optional int32 resolutiontype=7;//0==low,1==middle,2==high(640)
	optional string partmachinemodel=8;	//机器型号，如iphone4,iphone4s
	optional VideoCallParameter videoparameter=9;//视频相关参数
	optional int32 voicecodetype=10;//ERTCVoiceCodecType
	optional uint64 srvtime=11;//服务器时间
    optional VideoCallParameter tovideoparameter=12;
    repeated IceServerPB toice_server=13;
	optional string toversion=14;
	optional int32 tovoicecodetype=15;
	repeated string relayservercandidate=16;//预先设置好的中继服务器的candidate
	optional string aeskey=17;//udp 交换信令aes密码
	optional uint64 relayrandkey=18;//udp 中继随机应子
	optional bool useoffer=19;//是否使用服务器提供的offer
	optional string rtcoffer=20;// 服务器提供的offer
	optional string rtcanswer=21;// 服务器提供的answer
}


//通讯录接收方不存在 切换至系统电话 系统电话接通完成之后调用此接口 发送短信 通知接收方下载 APP
//method: sendSms4SystemCall
message SendSms4SystemCallRequest
{
    optional app.MobRequestBase baseinfo = 1;
    required uint64 uid=2;
    required uint64 touid=3;
    optional string fromnickname=4;
}
message SendSms4SystemCallResponse
{
    optional int32 ret=1;//0==success;
}

//Voip新版本语音视频聊天时获取房间请求
//method: dialCall
message DialCallRequest
{
	optional app.MobRequestBase baseinfo = 1;
	required uint64 uid=2;		//发送方uid
	required string tococonumber=3;	//接收方coconumber
	optional int32 rtc_type=4;	//0==voice;1==vedio
	optional bool   broadbandnet=5;//是否是宽带网络
	optional int32  resolutiontype=7;//0==low,1==middle,2==high(640)
	optional string machinemodel=8;	//机器型号，如iphone4,iphone4s
}

message DialCallResponse
{
	required int32 ret=1;
	repeated IceServerPB ice_server=2;
	optional int32 room_id=3;		//turnserver服务器房间号 用于兼容老版本
    optional string voice_mail_id=4;//发送voicemail的唯一id
    optional uint64 created=5;		//发送方创建session的时间
    optional bool caller=6;//区分主叫方被叫方 true主叫方 false被叫方
    optional uint64 touid=7;//被叫方的uid
    optional int32  resolutiontype=8;//0==low,1==middle,2==high(640)
	optional string partmachinemodel=9;	//机器型号，如iphone4,iphone4s
}

//通知IOS客户端是否支持后台本地Push功能
//method:LocalPushCfgNtf
message LocalPushConfigNtf
{
	required bool supportpush=1;
}

//客户端连接成功后发送同步数据请求,服务器收到同步请求后先同步好友，然后同步离线消息
//method: SyncMsg
message SyncMessageRequest
{
	optional app.MobRequestBase baseinfo = 1;
	required uint64 uid=2;
}
message SyncMessageResponse
{
	required int32 ret=1;
}

//method: pingntf
message PingResultRequest
{
	optional app.MobRequestBase baseinfo = 1;//realip需要填充
	required uint64 uid=2;//
	required string pingsrvip=3;//ping的服务器IP地址
	required int32 srvport=4;//
	required int32  avgcosttime=5;//平均ping时间
	required float  packetlostrate=6;//丢包率
	optional string teleoperator=7;//运营商
}
message PingResultResponse
{
	required int32 ret=1;
}

//method: markGrade
message MarkGradeRequest
{
	optional app.MobRequestBase baseinfo=1;
	required uint64 uid=2;//本手机用户的uid
	required uint64 partuid=3;//另一方手机用户的uid
	required uint64 created=4;//这次会话的created
	optional int32 grade=5;//分数
}
message MarkGradeResponse
{
	required int32 ret=1;
}

//voicecall客户端每隔3秒Ping一下服务器，videocall客户端每隔1秒Ping一下服务器
//method: voipHealthCheck
message VoipHealthCheckRequest
{
    optional app.MobRequestBase baseinfo = 1;//realip需要填充
    required uint64 uid=2;//
    required uint64 created=3;
    required uint64 partuid=4;
    required uint64 roomid=5;
    required int32 timecount=6;//此次VOIP已经接通了多少时间
    optional uint64 dataconsumed=7;//此次VOIP消耗了多少数据流量，包含上行，下行，单位是byte
    required bool isCaller = 8;//是否是拨打方
}
message VoipHealthCheckResponse
{
    required int32 ret=1;
}

//appid=msgproxy
service P2PChatService
{
    rpc SendP2P(SendP2PMessageRequest) returns (SendP2PMessageResponse);
    rpc markP2PRead(MarkP2PReadRequest) returns (MarkP2PReadResponse);
    rpc SyncMsg(SyncMessageRequest) returns(SyncMessageResponse);
    rpc AckReceiveds(AckReceivedsP2POffMessageRequest) returns (AckReceivedsP2POffMessageResponse);
    rpc AckReceivedDel(AckReceivedDelMessageRequest) returns (AckReceivedDelMessageResponse);
    rpc AckBatchReceivedDel(AckReceivedDelOffMessageListRequest) returns (AckReceivedDelOffMessageListResponse);
    //新版本已经不用了
    rpc getRTCChatRoom(GetRTCChatRoomRequest) returns (GetRTCChatRoomResponse);
    rpc sendSms4SystemCall(SendSms4SystemCallRequest) returns (SendSms4SystemCallResponse);
    rpc dialCall(DialCallRequest) returns (DialCallResponse);
    rpc pingntf(PingResultRequest) returns (PingResultResponse);
    rpc markGrade(MarkGradeRequest) returns (MarkGradeResponse);
    rpc voipHealthCheck(VoipHealthCheckRequest) returns(VoipHealthCheckResponse);
    rpc getVoipCall(GetVoipCallRequest) returns(GetVoipCallResponse);
		rpc reportVoipStatus(ReportVoipStatusRequest) returns(ReportVoipStatusResponse);
}
//client rpc call real method=appid.method
//ex:发送P2P消息的是: msgproxy.SendP2P
